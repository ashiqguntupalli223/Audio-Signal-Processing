import guidata

import dspmsg

import numpy
import scipy
import scipy.signal

from guidata.dataset.datatypes import DataSet
from guidata.dataset.dataitems import FloatItem, BoolItem

from guidata.qt.QtGui import QWidget, QPushButton, QGridLayout, QVBoxLayout
from guidata.qt.QtCore import QTimer, QPoint, SIGNAL

from guiqwt.plot import CurveWidget
from guiqwt.curve import PanelWidget
from guiqwt.builder import make

from matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

#from matplotlib.pyplot import specgram


defaultUpdateTimeout = 100
defaultRescaleTimeout = 1000
defaultDeadTimeout = 2000

class dspWidget(QWidget):
   def __init__(self, name, instanceId, widgetList,inactivityTimeout):
      QWidget.__init__(self)

      self.instanceId = instanceId
      self.name = name+' (Instance '+`instanceId`+')' # name
      self.widgetList = widgetList

      self.setWindowTitle(self.name) 

      self.updateTimer = QTimer()
      self.updateTimer.timeout.connect(self.update)
      self.updateTimer.start(defaultUpdateTimeout)

      self.rescaleTimer = QTimer()
      self.rescaleTimer.timeout.connect(self.rescale)
      self.rescaleTimer.start(defaultRescaleTimeout)

      if inactivityTimeout:
         self.killTimer = QTimer()
         self.killTimer.timeout.connect(self.inactiveTimeout)
         self.killTimer.start(defaultDeadTimeout)
      else:
         self.killTimer = None

      widgetList.append(self)
      
      self.closeEvent = self.close
      self.wheelEvent = self.changeScale
      
      self.preferredSamples = 1024

   def changeScale(self, event):
      if event.delta() > 0:
         if self.preferredSamples > 16:
            self.preferredSamples = self.preferredSamples / 2
      else:
         self.preferredSamples = self.preferredSamples * 2
      return
   
   def close(self, event):
      self.kill()
   
   def inactiveTimeout(self):
      if dspmsg.instanceActive(self.instanceId) == 0:
         self.kill()
   
   def kill(self):
      dspmsg.removeInstance(self.instanceId)
      self.wheelEvent = None
      self.closeEvent = None
      if self.killTimer is not None:
         self.killTimer.stop()
      self.rescaleTimer.stop()
      self.updateTimer.stop()
      self.widgetList.remove(self)

   def getInstanceId(self):
      return self.instanceId

   def update(self):
      return

   def rescale(self):
      return
      
class triggerDialog(DataSet):
   """Trigger Setup"""
   enabled = BoolItem("Trigger Enable")
   level = FloatItem("Trigger Level", default=0.0)

class dspCurveWidget(CurveWidget):

   def __init__(self, title, mode="PCM", color=0, show_buttons=True, show_itemlist=True, show_legend=False):
      CurveWidget.__init__(self,title=title, show_itemlist=show_itemlist)

      self.mode = mode
      self.show_legend = show_legend
      
      self.modeButton = QPushButton()
      if self.mode != 'MSCoh':
         self.modeButton.labels = {'PCM':'Freq', 'Freq':'PCM'}
         self.modeButton.setText(self.modeButton.labels[self.mode])
         self.connect(self.modeButton, SIGNAL('clicked()'), self.modeButtonPressed)

      self.itemListButton = QPushButton("Item List");
      self.connect(self.itemListButton, SIGNAL('clicked()'), self.itemListButtonPressed)

      self.triggerButton = QPushButton("Trigger");
      self.connect(self.triggerButton, SIGNAL('clicked()'), self.triggerButtonPressed)

      self.snapshotButton = QPushButton("Snapshot");
      self.connect(self.snapshotButton, SIGNAL('clicked()'), self.snapshotButtonPressed)
      
      self.spectrogramButton = QPushButton("Spectrogram");    
      self.connect(self.spectrogramButton, SIGNAL('clicked()'), self.spectrogramButtonPressed)
      
      self.PSDButton = QPushButton("PSD");    
      self.connect(self.PSDButton, SIGNAL('clicked()'), self.PSDButtonPressed)

      if show_buttons:
         layout = QVBoxLayout()
         self.buttonPanel = QWidget()
         self.buttonPanel.setLayout(layout)
         layout.addWidget(self.modeButton)
         layout.addWidget(self.itemListButton)
         layout.addWidget(self.triggerButton)
         layout.addWidget(self.snapshotButton)
         layout.addWidget(self.spectrogramButton)
         layout.addWidget(self.PSDButton)
         layout.addWidget(QWidget())
         self.addWidget(self.buttonPanel) 
      
      self.plot = self.get_plot()
      self.plot.curves = []
      self.plot.refresh = True
      self.plot.snapshot = None
      self.plot.crosshairs = None
      self.matplot = None
      
      self.channels = 0
      self.blockSize = 0
      self.samples = 0
      self.Fs = 0
      self.colorBase = color
      self.customCurve = None
      self.triggerCursor = None
      self.triggerEnabled = False
      self.triggerLevel = 0.0
      
      self.plot.mouseDoubleClickEvent = self.setCrossHairs
      
   def setCrossHairs(self, event):      
      x = event.pos().x() - self.plot.canvas().geometry().x()
      y = event.pos().y() - self.plot.canvas().geometry().y()
      if self.plot.crosshairs is not None:
         self.plot.crosshairs.move_local_point_to(0, QPoint(x,y))
         self.plot.crosshairs.show()

   def onclick(event):
       print 'button=%d, x=%d, y=%d, xdata=%f, ydata=%f'%(
           event.button, event.x, event.y, event.xdata, event.ydata)

   def spectrogramButtonPressed(self):
      numPlots = 0
      for curve in self.plot.curves:
         if curve.isVisible():
            numPlots = numPlots + 1
            
      if numPlots == 0:
         return

      if self.matplot:
         self.matplot.figure.clear()
      else:
         self.matplot = QWidget()
         self.matplot.figure = Figure()
         self.matplot.canvas = FigureCanvas(self.matplot.figure)
         self.matplot.canvas.setParent(self.matplot)
         vbox = QVBoxLayout()
         vbox.addWidget(self.matplot.canvas)
         self.matplot.setLayout(vbox)
         self.matplot.figure.subplots_adjust(hspace = .75, top=0.85)
         
      title = self.parent().name + ' - ' + self.plot.get_title()
      self.matplot.figure.suptitle(title, fontsize = 'x-large', weight='bold')

      plotNum = 1
      for curve in self.plot.curves:
         if curve.isVisible():
            sound_info = curve.get_data()[1]
            subplot = self.matplot.figure.add_subplot(numPlots,1,plotNum, 
               title = curve.title().text(),
               xlabel = "Seconds",
               ylabel = "Hz",
            )
            subplot.specgram(sound_info,Fs=self.Fs)
            plotNum = plotNum + 1
      
      self.matplot.show()
      self.matplot.canvas.draw()


   def PSDButtonPressed(self):
      def nextpow2(n):
         m_f = numpy.log2(n)
         m_i = numpy.ceil(m_f)
         return 2**m_i
      
      numPlots = 0
      for curve in self.plot.curves:
         if curve.isVisible():
            numPlots = numPlots + 1
            
      if numPlots == 0:
         return

      if self.matplot:
         self.matplot.figure.clear()
      else:
         self.matplot = QWidget()
         self.matplot.figure = Figure()
         self.matplot.canvas = FigureCanvas(self.matplot.figure)
         self.matplot.canvas.setParent(self.matplot)
         vbox = QVBoxLayout()
         vbox.addWidget(self.matplot.canvas)
         self.matplot.setLayout(vbox)
         self.matplot.figure.subplots_adjust(hspace = .75, top=0.85)
         
      title = self.parent().name + ' - ' + self.plot.get_title()
      self.matplot.figure.suptitle(title, fontsize = 'x-large', weight='bold')

      plotNum = 1
      for curve in self.plot.curves:
         if curve.isVisible():
            sound_info = curve.get_data()[1]
            subplot = self.matplot.figure.add_subplot(numPlots,1,plotNum, 
               title = curve.title().text(),
               xlabel = "Hz",
               ylabel = "PSD [dB]",
            )
            subplot.plot(scipy.signal.welch(sound_info,fs=self.Fs, nperseg=nextpow2(self.Fs / 2))[0],
                         10*scipy.log10(scipy.signal.welch(sound_info,fs=self.Fs, 
                                                           nperseg=nextpow2(self.Fs / 2))[1]))
            ax = self.matplot.figure.gca()
            ax.set_xticks(numpy.arange(0, 500, 50))
            subplot.grid()
            subplot.axis(xmin=0, xmax=500)
            plotNum = plotNum + 1
      
      self.matplot.show()
      self.matplot.canvas.draw()


   def snapshotButtonPressed(self):
      xlen = len(self.plot.x)
      ylen = len(self.plot.curves)
      curveData = []
      empty = True
      for curve in self.plot.curves:
         if curve.isVisible():
            try:
               cdata = curve.get_data()[1]
               data = numpy.zeros(xlen)
               x = min(xlen, cdata.shape[0])
               data[0:x] = cdata[0:x]
               curveData.append(data)
               empty = False
            except:
               continue
      
      if empty:
         return
         
      average = numpy.average(curveData, axis=0)
      if self.plot.snapshot is None:
         self.plot.snapshot = make.curve([], [], 
            color='black', 
            title='Snapshot',
            linewidth=2
            )
         self.plot.add_item(self.plot.snapshot)
         
      self.plot.snapshot.set_data(self.plot.x, average)
      
   def itemListButtonPressed(self):
      panel = self.get_itemlist_panel()
      if panel.isVisible():
         panel.hide()
      else:
         panel.show()

   def triggerUpdateLabel(self, x, y):
      label = "Trigger = %.2f" % y
      return label

   def setCrosshairLabel(self, x, y):
      label = "Point = %.2f, %2f" % (x, y)
      return label
      
   def triggerButtonPressed(self):
      if self.mode == 'Freq':
         return
         
      trigger = triggerDialog()
      trigger.enabled = self.triggerEnabled
      trigger.level = self.triggerLevel
      trigger.edit()
      self.triggerEnabled = trigger.enabled
      self.triggerLevel = trigger.level
      
      if self.triggerEnabled:
         if self.triggerCursor is None:
            self.triggerCursor = make.marker(linewidth=2,markerstyle='-')
            self.triggerCursor.label_cb = self.triggerUpdateLabel
            self.plot.add_item(self.triggerCursor)
         self.triggerCursor.set_pos(y=self.triggerLevel)
      else:
         if self.triggerCursor is not None:
            self.plot.del_item(self.triggerCursor)
            self.triggerCursor = None

   def modeButtonPressed(self):
      if self.mode == 'PCM':
         self.mode = 'Freq'
      else:
         self.mode = 'PCM'
      self.modeButton.setText(self.modeButton.labels[self.mode])
      self.plot.refresh = True
      
   def initPlot(self, Fs, channels, blockSize, samples):
      self.Fs = Fs
      self.channels = channels
      self.blockSize = blockSize
      self.samples = samples
      colors = ['r', 'g', 'b', 'c', 'm', 'y', 'k','G']
      self.plot.del_all_items()
      
      self.plot.curves = []
      self.plot.snapshot = None

      self.plot.crosshairs = make.marker(label_cb=self.setCrosshairLabel,markerstyle='+')
      self.plot.add_item(self.plot.crosshairs) 
      self.plot.crosshairs.hide()

      if self.show_legend:
         self.plot.legend = make.legend("TR")
         self.plot.add_item(self.plot.legend)
         
      for channel in range (0, self.channels):
         curve = make.curve([], [], 
            color=colors[(self.colorBase + channel) % len(colors)], 
            title='Channel '+`channel`,
            )
         self.plot.add_item(curve)
         self.plot.curves.append(curve)
         
   def initPcmPlot(self):
      self.plot.maxy =  1
      self.plot.miny = -1
      self.plot.set_axis_limits("left", self.plot.miny, self.plot.maxy)
      self.plot.set_axis_limits("bottom", 0, self.samples)
      self.plot.set_titles(xlabel="Sample", ylabel="Level")
      self.plot.x = numpy.linspace(0, self.samples, self.samples)
      if self.triggerEnabled:
         self.triggerCursor.show()

   def initFreqPlot(self):
      self.plot.maxy = 10
      self.plot.miny = -50
      self.plot.minHz = 0
      self.plot.maxHz = self.Fs / 2
      self.plot.set_axis_limits("left", self.plot.miny, self.plot.maxy)
      self.plot.set_axis_limits("bottom", self.plot.minHz, self.plot.maxHz)
      self.plot.set_titles(xlabel="Frequency (Hz)", ylabel="Magnitude (dB)")
      self.plot.window = numpy.kaiser(self.samples, 5)
      self.plot.noise = 0.000001 * numpy.random.sample(size=self.samples)
      self.plot.x = numpy.linspace(self.plot.minHz, self.plot.maxHz, self.samples / 2)
      if self.triggerEnabled:
         self.triggerCursor.hide()

   def initMscohPlot(self):
      self.plot.maxy = 1
      self.plot.miny = 0
      self.plot.minHz = 0
      self.plot.maxHz = self.Fs / 2
      self.plot.set_axis_limits("left", self.plot.miny, self.plot.maxy)
      self.plot.set_axis_limits("bottom", self.plot.minHz, self.plot.maxHz)
      self.plot.set_titles(xlabel="Frequency (Hz)", ylabel="|Coherence|**2")
      self.plot.x = numpy.linspace(self.plot.minHz, self.plot.maxHz, self.samples / 2)
      if self.triggerEnabled:
         self.triggerCursor.hide()

   def rescalePcmPlot(self):
      maxy = 0.0
      for curve in self.plot.curves:
         x, y = curve.get_data()
         if len(y) > 0:
            ymax = numpy.max(numpy.abs(y))
            if ymax > maxy:
               maxy = ymax
      if abs(maxy - self.plot.maxy) > 0.10 * self.plot.maxy:
         if maxy < 0.01: maxy = 0.01
         self.plot.maxy = maxy
         self.plot.miny = -maxy
         self.plot.set_axis_limits("left", self.plot.miny, self.plot.maxy)

   def rescaleFreqPlot(self):
      #self.plot.do_autoscale(replot=False)
      return
  
   def rescaleMscohPlot(self):
      self.plot.do_autoscale(replot=False)
      self.plot.maxy = 1
      self.plot.miny = 0
      self.plot.minHz = 0
      self.plot.maxHz = self.Fs / 2 
      self.plot.set_axis_limits("left", self.plot.miny, self.plot.maxy)
      self.plot.set_axis_limits("bottom", self.plot.minHz, self.plot.maxHz)
      self.plot.x = numpy.linspace(self.plot.minHz, self.plot.maxHz, self.samples)
      return
      
   def rescale(self):
      if self.mode == 'PCM': 
         self.rescalePcmPlot()
      elif self.mode == 'MSCoh':
          self.rescaleMscohPlot()
      else: 
         self.rescaleFreqPlot()
   
   def findTrigger(self, data):
      sample = None
      for x in range(0, self.samples - 1):
         if data[x] < self.triggerLevel and data[x+1] >= self.triggerLevel:
            sample = x
            break
      return sample
      
   def update(self, Fs, channels, blockSize, samples, data):
      if blockSize == 0 or channels == 0:
         return
            
      if ( channels != self.channels or 
           blockSize != self.blockSize or 
           samples != self.samples or
           Fs != self.Fs or
           self.plot.refresh == True
         ):
            self.initPlot(Fs, channels, blockSize, samples)
            if self.mode == 'PCM':
               self.initPcmPlot()
            elif self.mode == 'MSCoh':
                self.initMscohPlot()
            else: 
               self.initFreqPlot()
            self.plot.refresh = False

      if self.mode == 'PCM':
         self.spectrogramButton.setEnabled(True)
         self.triggerButton.setEnabled(True)
         self.PSDButton.setEnabled(True)
      else:
         self.spectrogramButton.setEnabled(False)
         self.triggerButton.setEnabled(False)
         self.PSDButton.setEnabled(False)
         
      for channel in range (0, self.channels):
         if self.customCurve != None:
            self.customCurve(self.plot, channel, data)
         else:
            channelData = data[channels-channel-1:blockSize*samples*channels:channels]
            if self.mode == 'PCM':
               if self.triggerEnabled:
                  trigger = self.findTrigger(channelData)
                  if trigger == None:
                     trigger = 0
               else: 
                  trigger = 0
               self.plot.curves[channel].set_data(self.plot.x, channelData[trigger:trigger+self.samples])
            elif self.mode == 'MSCoh':
                self.plot.curves[channel].set_data(self.plot.x, data)
            else:
               if len(channelData) > 0:
                  y = numpy.fft.fft((channelData+self.plot.noise)*self.plot.window) / len(channelData)
                  y = 20*scipy.log10(numpy.abs(y))
                  self.plot.curves[channel].set_data(self.plot.x, y)

      self.plot.replot()

